#!/bin/bash

# Define macros for build targets.
# Generate bblayers.conf from get_bblayers.py.
# Some convenience macros are defined to save some typing.
# Set the build environement

if [[ ! $(readlink $(which sh)) =~ bash ]]
then
    echo ""
    echo "### ERROR: Please Change your /bin/sh symlink to point to bash. ### "
    echo ""
    echo "### sudo ln -sf /bin/bash /bin/sh ### "
    echo ""

    return 1
fi

# The SHELL variable also needs to be set to /bin/bash otherwise the build
# will fail, use chsh to change it to bash.
if [[ ! $SHELL =~ bash ]]
then
    echo ""
    echo "### ERROR: Please Change your shell to bash using chsh. ### "
    echo ""
    echo "### Make sure that the SHELL variable points to /bin/bash ### "
    echo ""

    return 1
fi

umask 022
unset DISTRO MACHINE PRODUCT VARIANT

# OE doesn't want a set-gid directory for its tmpdir
BT="build/tmp-glibc"

if [ ! -d ${BT} ]
then
    mkdir -m u=rwx,g=rx,g-s,o= -p ${BT}
elif [ -g ${BT} ]
then
    chmod -R g-s ${BT}
fi

unset BT

# Find where the global conf directory is
WS=$(dirname "${BASH_SOURCE}")
# Find where the workspace is
WS=$(readlink -f "${WS}")

BUILD_CONF_DIR="${WS}/build/conf"

export ENV_BBLAYERS_CONF=" ${BUILD_CONF_DIR}/bblayers.conf"
export ENV_LOCAL_CONF=" ${BUILD_CONF_DIR}/local.conf"
export ENV_PREPATH="$(readlink -f ${WS}/)"

mkdir -p ${BUILD_CONF_DIR}

cp -f meta-rpi/yocto-conf/bblayers.conf.sample ${ENV_BBLAYERS_CONF}
cp -f meta-rpi/yocto-conf/local.conf.sample ${ENV_LOCAL_CONF}

unset ENV_BBLAYERS_CONF ENV_PREPATH ENV_LOCAL_CONF

. ${WS}/oe-init-build-env > /dev/null

# Let bitbake use the following env-vars as if they were pre-set bitbake ones.
# (BBLAYERS is explicitly blocked from this within OE-Core itself, though...)
# oe-init-build-env calls oe-buildenv-internal which sets
# BB_ENV_EXTRAWHITE, append our vars to the list
export BB_ENV_EXTRAWHITE="${BB_ENV_EXTRAWHITE} DL_DIR PRODUCT VARIANT"

cat <<EOF

----------------------------------------------------------------------------

Welcome to RPI Yocto build system project!

The Yocto Project has extensive documentation about OE including a reference
manual which can be found at:
    http://yoctoproject.org/documentation

For more information about OpenEmbedded see their website:
    http://www.openembedded.org/

EOF


